"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateWebglRendererSettings = validateWebglRendererSettings;
exports.WEBGL_RENDERER_DEFAULT_SETTINGS = void 0;

var _label = _interopRequireDefault(require("../canvas/components/label"));

var _hover = _interopRequireDefault(require("../canvas/components/hover"));

var _edgeLabel = _interopRequireDefault(require("../canvas/components/edge-label"));

var _node = _interopRequireDefault(require("./programs/node.fast"));

var _edge = _interopRequireDefault(require("./programs/edge"));

var _edge2 = _interopRequireDefault(require("./programs/edge.arrow"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Sigma.js WebGL Renderer Settings
 * =================================
 *
 * The list of settings for the WebGL renderer and some handy functions.
 */
function validateWebglRendererSettings(settings) {
  // Label grid cell
  if (settings.labelGrid && settings.labelGrid.cell && _typeof(settings.labelGrid.cell) === 'object' && (!settings.labelGrid.cell.width || !settings.labelGrid.cell.height)) {
    throw new Error('sigma/renderers/webgl/settings: invalid `labelGrid.cell`. Expecting {width, height}.');
  }
}

var WEBGL_RENDERER_DEFAULT_SETTINGS = {
  // Performance
  hideEdgesOnMove: false,
  hideLabelsOnMove: false,
  renderLabels: true,
  renderEdgeLabels: false,
  // Component rendering
  defaultNodeColor: '#999',
  defaultNodeType: 'circle',
  defaultEdgeColor: '#ccc',
  defaultEdgeType: 'line',
  labelFont: 'Arial',
  labelSize: 14,
  labelWeight: 'normal',
  edgeLabelFont: 'Arial',
  edgeLabelSize: 14,
  edgeLabelWeight: 'normal',
  // Labels
  labelGrid: {
    cell: null,
    renderedSizeThreshold: -Infinity
  },
  // Reducers
  nodeReducer: null,
  edgeReducer: null,
  // Features
  zIndex: false,
  // Renderers
  labelRenderer: _label["default"],
  hoverRenderer: _hover["default"],
  edgeLabelRenderer: _edgeLabel["default"],
  // Program classes
  nodeProgramClasses: {
    circle: _node["default"]
  },
  edgeProgramClasses: {
    arrow: _edge2["default"],
    line: _edge["default"]
  }
};
exports.WEBGL_RENDERER_DEFAULT_SETTINGS = WEBGL_RENDERER_DEFAULT_SETTINGS;